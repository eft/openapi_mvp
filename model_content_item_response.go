/*
Minimum Spec

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mvp

import (
	"encoding/json"
	"fmt"
)

// ContentItemResponse - struct for ContentItemResponse
type ContentItemResponse struct {
	File *File
	Folder *Folder
}

// FileAsContentItemResponse is a convenience function that returns File wrapped in ContentItemResponse
func FileAsContentItemResponse(v *File) ContentItemResponse {
	return ContentItemResponse{
		File: v,
	}
}

// FolderAsContentItemResponse is a convenience function that returns Folder wrapped in ContentItemResponse
func FolderAsContentItemResponse(v *Folder) ContentItemResponse {
	return ContentItemResponse{
		Folder: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContentItemResponse) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'File'
	if jsonDict["contentType"] == "File" {
		// try to unmarshal JSON data into File
		err = json.Unmarshal(data, &dst.File)
		if err == nil {
			return nil // data stored in dst.File, return on the first match
		} else {
			dst.File = nil
			return fmt.Errorf("failed to unmarshal ContentItemResponse as File: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Folder'
	if jsonDict["contentType"] == "Folder" {
		// try to unmarshal JSON data into Folder
		err = json.Unmarshal(data, &dst.Folder)
		if err == nil {
			return nil // data stored in dst.Folder, return on the first match
		} else {
			dst.Folder = nil
			return fmt.Errorf("failed to unmarshal ContentItemResponse as Folder: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContentItemResponse) MarshalJSON() ([]byte, error) {
	if src.File != nil {
		return json.Marshal(&src.File)
	}

	if src.Folder != nil {
		return json.Marshal(&src.Folder)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContentItemResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.File != nil {
		return obj.File
	}

	if obj.Folder != nil {
		return obj.Folder
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ContentItemResponse) GetActualInstanceValue() (interface{}) {
	if obj.File != nil {
		return *obj.File
	}

	if obj.Folder != nil {
		return *obj.Folder
	}

	// all schemas are nil
	return nil
}

type NullableContentItemResponse struct {
	value *ContentItemResponse
	isSet bool
}

func (v NullableContentItemResponse) Get() *ContentItemResponse {
	return v.value
}

func (v *NullableContentItemResponse) Set(val *ContentItemResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableContentItemResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableContentItemResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentItemResponse(val *ContentItemResponse) *NullableContentItemResponse {
	return &NullableContentItemResponse{value: val, isSet: true}
}

func (v NullableContentItemResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentItemResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


