/*
Minimum Spec

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mvp

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonProperties{}

// CommonProperties struct for CommonProperties
type CommonProperties struct {
	// Folder/File
	ContentType string `json:"contentType"`
	// The name of the item.
	Name string `json:"name"`
	// Read only if true
	Readonly *bool `json:"readonly,omitempty"`
}

type _CommonProperties CommonProperties

// NewCommonProperties instantiates a new CommonProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonProperties(contentType string, name string) *CommonProperties {
	this := CommonProperties{}
	this.ContentType = contentType
	this.Name = name
	return &this
}

// NewCommonPropertiesWithDefaults instantiates a new CommonProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonPropertiesWithDefaults() *CommonProperties {
	this := CommonProperties{}
	return &this
}

// GetContentType returns the ContentType field value
func (o *CommonProperties) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *CommonProperties) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *CommonProperties) SetContentType(v string) {
	o.ContentType = v
}

// GetName returns the Name field value
func (o *CommonProperties) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CommonProperties) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CommonProperties) SetName(v string) {
	o.Name = v
}

// GetReadonly returns the Readonly field value if set, zero value otherwise.
func (o *CommonProperties) GetReadonly() bool {
	if o == nil || IsNil(o.Readonly) {
		var ret bool
		return ret
	}
	return *o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonProperties) GetReadonlyOk() (*bool, bool) {
	if o == nil || IsNil(o.Readonly) {
		return nil, false
	}
	return o.Readonly, true
}

// HasReadonly returns a boolean if a field has been set.
func (o *CommonProperties) HasReadonly() bool {
	if o != nil && !IsNil(o.Readonly) {
		return true
	}

	return false
}

// SetReadonly gets a reference to the given bool and assigns it to the Readonly field.
func (o *CommonProperties) SetReadonly(v bool) {
	o.Readonly = &v
}

func (o CommonProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contentType"] = o.ContentType
	toSerialize["name"] = o.Name
	if !IsNil(o.Readonly) {
		toSerialize["readonly"] = o.Readonly
	}
	return toSerialize, nil
}

func (o *CommonProperties) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contentType",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonProperties := _CommonProperties{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonProperties)

	if err != nil {
		return err
	}

	*o = CommonProperties(varCommonProperties)

	return err
}

type NullableCommonProperties struct {
	value *CommonProperties
	isSet bool
}

func (v NullableCommonProperties) Get() *CommonProperties {
	return v.value
}

func (v *NullableCommonProperties) Set(val *CommonProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonProperties(val *CommonProperties) *NullableCommonProperties {
	return &NullableCommonProperties{value: val, isSet: true}
}

func (v NullableCommonProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


