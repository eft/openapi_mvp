/*
Minimum Spec

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ContentItem - struct for ContentItem
type ContentItem struct {
	File *File
	Folder *Folder
}

// FileAsContentItem is a convenience function that returns File wrapped in ContentItem
func FileAsContentItem(v *File) ContentItem {
	return ContentItem{
		File: v,
	}
}

// FolderAsContentItem is a convenience function that returns Folder wrapped in ContentItem
func FolderAsContentItem(v *Folder) ContentItem {
	return ContentItem{
		Folder: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContentItem) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into File
	err = newStrictDecoder(data).Decode(&dst.File)
	if err == nil {
		jsonFile, _ := json.Marshal(dst.File)
		if string(jsonFile) == "{}" { // empty struct
			dst.File = nil
		} else {
			if err = validator.Validate(dst.File); err != nil {
				dst.File = nil
			} else {
				match++
			}
		}
	} else {
		dst.File = nil
	}

	// try to unmarshal data into Folder
	err = newStrictDecoder(data).Decode(&dst.Folder)
	if err == nil {
		jsonFolder, _ := json.Marshal(dst.Folder)
		if string(jsonFolder) == "{}" { // empty struct
			dst.Folder = nil
		} else {
			if err = validator.Validate(dst.Folder); err != nil {
				dst.Folder = nil
			} else {
				match++
			}
		}
	} else {
		dst.Folder = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.File = nil
		dst.Folder = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ContentItem)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ContentItem)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContentItem) MarshalJSON() ([]byte, error) {
	if src.File != nil {
		return json.Marshal(&src.File)
	}

	if src.Folder != nil {
		return json.Marshal(&src.Folder)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContentItem) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.File != nil {
		return obj.File
	}

	if obj.Folder != nil {
		return obj.Folder
	}

	// all schemas are nil
	return nil
}

type NullableContentItem struct {
	value *ContentItem
	isSet bool
}

func (v NullableContentItem) Get() *ContentItem {
	return v.value
}

func (v *NullableContentItem) Set(val *ContentItem) {
	v.value = val
	v.isSet = true
}

func (v NullableContentItem) IsSet() bool {
	return v.isSet
}

func (v *NullableContentItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentItem(val *ContentItem) *NullableContentItem {
	return &NullableContentItem{value: val, isSet: true}
}

func (v NullableContentItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


